# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from flyinglightspeck/FLSElt.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import flyinglightspeck.msg
import std_msgs.msg

class FLSElt(genpy.Message):
  _md5sum = "fc2febfc11bc6f04dce2bc4f1bbeb76a"
  _type = "flyinglightspeck/FLSElt"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
uint8[] whatispresent
FLSLHD[] coordinate
FLSRGBA[] color
FLSDuration[] duration

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: flyinglightspeck/FLSLHD
float32 l
float32 h
float32 d
================================================================================
MSG: flyinglightspeck/FLSRGBA
uint8 r
uint8 g
uint8 b
uint8 a
================================================================================
MSG: flyinglightspeck/FLSDuration
int32 start
int32 end"""
  __slots__ = ['header','whatispresent','coordinate','color','duration']
  _slot_types = ['std_msgs/Header','uint8[]','flyinglightspeck/FLSLHD[]','flyinglightspeck/FLSRGBA[]','flyinglightspeck/FLSDuration[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,whatispresent,coordinate,color,duration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FLSElt, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.whatispresent is None:
        self.whatispresent = b''
      if self.coordinate is None:
        self.coordinate = []
      if self.color is None:
        self.color = []
      if self.duration is None:
        self.duration = []
    else:
      self.header = std_msgs.msg.Header()
      self.whatispresent = b''
      self.coordinate = []
      self.color = []
      self.duration = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.whatispresent
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.coordinate)
      buff.write(_struct_I.pack(length))
      for val1 in self.coordinate:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.l, _x.h, _x.d))
      length = len(self.color)
      buff.write(_struct_I.pack(length))
      for val1 in self.color:
        _x = val1
        buff.write(_get_struct_4B().pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.duration)
      buff.write(_struct_I.pack(length))
      for val1 in self.duration:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.start, _x.end))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.coordinate is None:
        self.coordinate = None
      if self.color is None:
        self.color = None
      if self.duration is None:
        self.duration = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.whatispresent = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.coordinate = []
      for i in range(0, length):
        val1 = flyinglightspeck.msg.FLSLHD()
        _x = val1
        start = end
        end += 12
        (_x.l, _x.h, _x.d,) = _get_struct_3f().unpack(str[start:end])
        self.coordinate.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.color = []
      for i in range(0, length):
        val1 = flyinglightspeck.msg.FLSRGBA()
        _x = val1
        start = end
        end += 4
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4B().unpack(str[start:end])
        self.color.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.duration = []
      for i in range(0, length):
        val1 = flyinglightspeck.msg.FLSDuration()
        _x = val1
        start = end
        end += 8
        (_x.start, _x.end,) = _get_struct_2i().unpack(str[start:end])
        self.duration.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.whatispresent
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.coordinate)
      buff.write(_struct_I.pack(length))
      for val1 in self.coordinate:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.l, _x.h, _x.d))
      length = len(self.color)
      buff.write(_struct_I.pack(length))
      for val1 in self.color:
        _x = val1
        buff.write(_get_struct_4B().pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.duration)
      buff.write(_struct_I.pack(length))
      for val1 in self.duration:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.start, _x.end))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.coordinate is None:
        self.coordinate = None
      if self.color is None:
        self.color = None
      if self.duration is None:
        self.duration = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.whatispresent = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.coordinate = []
      for i in range(0, length):
        val1 = flyinglightspeck.msg.FLSLHD()
        _x = val1
        start = end
        end += 12
        (_x.l, _x.h, _x.d,) = _get_struct_3f().unpack(str[start:end])
        self.coordinate.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.color = []
      for i in range(0, length):
        val1 = flyinglightspeck.msg.FLSRGBA()
        _x = val1
        start = end
        end += 4
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4B().unpack(str[start:end])
        self.color.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.duration = []
      for i in range(0, length):
        val1 = flyinglightspeck.msg.FLSDuration()
        _x = val1
        start = end
        end += 8
        (_x.start, _x.end,) = _get_struct_2i().unpack(str[start:end])
        self.duration.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
